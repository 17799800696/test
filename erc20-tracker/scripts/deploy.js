const { ethers } = require("hardhat");
const fs = require("fs");
const path = require("path");

async function main() {
    console.log("ÂºÄÂßãÈÉ®ÁΩ≤TrackerTokenÂêàÁ∫¶...");
    
    // Ëé∑ÂèñÈÉ®ÁΩ≤ËÄÖË¥¶Êà∑
    const [deployer] = await ethers.getSigners();
    console.log("ÈÉ®ÁΩ≤Ë¥¶Êà∑:", deployer.address);
    
    // Ëé∑ÂèñË¥¶Êà∑‰ΩôÈ¢ù
    const balance = await ethers.provider.getBalance(deployer.address);
    console.log("Ë¥¶Êà∑‰ΩôÈ¢ù:", ethers.formatEther(balance), "ETH");
    
    // Ëé∑ÂèñÁΩëÁªú‰ø°ÊÅØ
    const network = await ethers.provider.getNetwork();
    console.log("ÁΩëÁªú:", network.name, "(Chain ID:", network.chainId.toString(), ")");
    
    // ÂêàÁ∫¶ÂèÇÊï∞
    const tokenName = "TrackerToken";
    const tokenSymbol = "TKT";
    const initialOwner = deployer.address;
    
    console.log("\nÂêàÁ∫¶ÂèÇÊï∞:");
    console.log("- ‰ª£Â∏ÅÂêçÁß∞:", tokenName);
    console.log("- ‰ª£Â∏ÅÁ¨¶Âè∑:", tokenSymbol);
    console.log("- ÂàùÂßãÊâÄÊúâËÄÖ:", initialOwner);
    
    // ÈÉ®ÁΩ≤ÂêàÁ∫¶
    console.log("\nÊ≠£Âú®ÈÉ®ÁΩ≤ÂêàÁ∫¶...");
    const TrackerToken = await ethers.getContractFactory("TrackerToken");
    const trackerToken = await TrackerToken.deploy(tokenName, tokenSymbol, initialOwner);
    
    // Á≠âÂæÖÈÉ®ÁΩ≤ÂÆåÊàê
    await trackerToken.waitForDeployment();
    const contractAddress = await trackerToken.getAddress();
    
    console.log("\n‚úÖ ÂêàÁ∫¶ÈÉ®ÁΩ≤ÊàêÂäü!");
    console.log("ÂêàÁ∫¶Âú∞ÂùÄ:", contractAddress);
    
    // È™åËØÅÂêàÁ∫¶‰ø°ÊÅØ
    console.log("\nÈ™åËØÅÂêàÁ∫¶‰ø°ÊÅØ...");
    const contractInfo = await trackerToken.getContractInfo();
    console.log("- ‰ª£Â∏ÅÂêçÁß∞:", contractInfo.tokenName);
    console.log("- ‰ª£Â∏ÅÁ¨¶Âè∑:", contractInfo.tokenSymbol);
    console.log("- Â∞èÊï∞‰ΩçÊï∞:", contractInfo.tokenDecimals.toString());
    console.log("- ÊÄª‰æõÂ∫îÈáè:", ethers.formatEther(contractInfo.tokenTotalSupply));
    console.log("- ÊúÄÂ§ß‰æõÂ∫îÈáè:", ethers.formatEther(contractInfo.maxSupply));
    console.log("- ÂêàÁ∫¶ÊâÄÊúâËÄÖ:", contractInfo.contractOwner);
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤‰ø°ÊÅØ
    const deploymentInfo = {
        network: {
            name: network.name,
            chainId: network.chainId.toString()
        },
        contract: {
            name: "TrackerToken",
            address: contractAddress,
            deployer: deployer.address,
            deploymentTime: new Date().toISOString(),
            blockNumber: await ethers.provider.getBlockNumber()
        },
        token: {
            name: contractInfo.tokenName,
            symbol: contractInfo.tokenSymbol,
            decimals: contractInfo.tokenDecimals.toString(),
            maxSupply: contractInfo.maxSupply.toString()
        },
        transactionHash: trackerToken.deploymentTransaction().hash
    };
    
    // ÂàõÂª∫deploymentsÁõÆÂΩï
    const deploymentsDir = path.join(__dirname, "..", "deployments");
    if (!fs.existsSync(deploymentsDir)) {
        fs.mkdirSync(deploymentsDir, { recursive: true });
    }
    
    // ‰øùÂ≠òÈÉ®ÁΩ≤ËÆ∞ÂΩï
    const timestamp = Date.now();
    const deploymentFile = path.join(deploymentsDir, `deployment-${timestamp}.json`);
    const latestFile = path.join(deploymentsDir, "latest.json");
    
    fs.writeFileSync(deploymentFile, JSON.stringify(deploymentInfo, null, 2));
    fs.writeFileSync(latestFile, JSON.stringify(deploymentInfo, null, 2));
    
    console.log("\nüìÑ ÈÉ®ÁΩ≤‰ø°ÊÅØÂ∑≤‰øùÂ≠ò:");
    console.log("- ËØ¶ÁªÜËÆ∞ÂΩï:", deploymentFile);
    console.log("- ÊúÄÊñ∞ÈÉ®ÁΩ≤:", latestFile);
    
    // ËæìÂá∫ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ
    console.log("\nüîß ÁéØÂ¢ÉÂèòÈáèÈÖçÁΩÆ:");
    if (network.chainId === 11155111n) {
        console.log(`SEPOLIA_CONTRACT_ADDRESS=${contractAddress}`);
    } else if (network.chainId === 84532n) {
        console.log(`BASE_SEPOLIA_CONTRACT_ADDRESS=${contractAddress}`);
    } else {
        console.log(`CONTRACT_ADDRESS_${network.chainId}=${contractAddress}`);
    }
    
    console.log("\nüéâ ÈÉ®ÁΩ≤ÂÆåÊàê!");
    console.log("\n‰∏ã‰∏ÄÊ≠•:");
    console.log("1. Êõ¥Êñ∞.envÊñá‰ª∂‰∏≠ÁöÑÂêàÁ∫¶Âú∞ÂùÄ");
    console.log("2. ËøêË°åÊµãËØïËÑöÊú¨È™åËØÅÂêàÁ∫¶ÂäüËÉΩ");
    console.log("3. ÂêØÂä®GoÂêéÁ´ØÊúçÂä°ÂºÄÂßãÁõëÂê¨‰∫ã‰ª∂");
    
    return {
        contract: trackerToken,
        address: contractAddress,
        deploymentInfo
    };
}

// Â¶ÇÊûúÁõ¥Êé•ËøêË°åÊ≠§ËÑöÊú¨
if (require.main === module) {
    main()
        .then(() => process.exit(0))
        .catch((error) => {
            console.error("‚ùå ÈÉ®ÁΩ≤Â§±Ë¥•:", error);
            process.exit(1);
        });
}

module.exports = main;